import boto3
import logging
import time

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Initialize AWS clients
ec2_client = boto3.client('ec2')
cloudwatch_client = boto3.client('cloudwatchlogs')

# Constants
INSTANCE_ID = 'YOUR_INSTANCE_ID'
LOG_GROUP_NAME = 'YourLogGroupName'
LOG_STREAM_NAME = 'YourLogStreamName'

# Create CloudWatch log group
def create_log_group():
    try:
        response = cloudwatch_client.create_log_group(logGroupName=LOG_GROUP_NAME)
        logger.info('Log group created: %s', LOG_GROUP_NAME)
    except Exception as e:
        logger.error('Failed to create log group: %s', str(e))

# Create CloudWatch log stream
def create_log_stream():
    try:
        response = cloudwatch_client.create_log_stream(logGroupName=LOG_GROUP_NAME, logStreamName=LOG_STREAM_NAME)
        logger.info('Log stream created: %s', LOG_STREAM_NAME)
    except Exception as e:
        logger.error('Failed to create log stream: %s', str(e))

# Push log events to CloudWatch log stream
def put_log_events(cpu_utilization):
    try:
        response = cloudwatch_client.put_log_events(
            logGroupName=LOG_GROUP_NAME,
            logStreamName=LOG_STREAM_NAME,
            logEvents=[
                {
                    'timestamp': int(time.time() * 1000),
                    'message': f'CPU Utilization: {cpu_utilization}%'
                }
            ]
        )
        logger.info('Log event sent')
    except Exception as e:
        logger.error('Failed to send log event: %s', str(e))

# Get CPU utilization of the EC2 instance
def get_cpu_utilization(instance_id):
    try:
        response = cloudwatch_client.get_metric_statistics(
            Namespace='AWS/EC2',
            MetricName='CPUUtilization',
            Dimensions=[
                {
                    'Name': 'InstanceId',
                    'Value': instance_id
                },
            ],
            StartTime=(time.time() - 300),  # Look back 5 minutes
            EndTime=time.time(),
            Period=60,
            Statistics=['Average'],
        )
        if 'Datapoints' in response and len(response['Datapoints']) > 0:
            cpu_utilization = response['Datapoints'][-1]['Average']
            logger.info('CPU utilization: %s%%', cpu_utilization)
            return cpu_utilization
        else:
            logger.warning('No CPU utilization data found')
            return None
    except Exception as e:
        logger.error('Failed to get CPU utilization: %s', str(e))
        return None

if __name__ == '__main__':
    create_log_group()
    create_log_stream()

    while True:
        cpu_utilization = get_cpu_utilization(INSTANCE_ID)
        if cpu_utilization is not None:
            put_log_events(cpu_utilization)

        time.sleep(60)  # Sleep for 1 minute before checking again
